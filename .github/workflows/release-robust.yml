name: Build and Release (Robust)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-release:
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - arch: arm64
            homebrew_prefix: /opt/homebrew
            cc_arch: arm64
          - arch: x86_64
            homebrew_prefix: /usr/local
            cc_arch: x86_64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Homebrew and Dependencies
      run: |
        echo "🚀 Setting up dependencies for ${{ matrix.arch }} build..."
        echo "Runner architecture: $(uname -m)"
        echo "Target architecture: ${{ matrix.arch }}"
        echo "Homebrew prefix: ${{ matrix.homebrew_prefix }}"
        
        # Ensure Homebrew is installed for the target architecture
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          # For arm64 builds, we need Apple Silicon Homebrew
          if [ ! -d "${{ matrix.homebrew_prefix }}" ]; then
            echo "📦 Installing Apple Silicon Homebrew..."
            sudo mkdir -p ${{ matrix.homebrew_prefix }}
            sudo chown -R $(whoami) ${{ matrix.homebrew_prefix }}
            curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C ${{ matrix.homebrew_prefix }}
          fi
          
          export PATH="${{ matrix.homebrew_prefix }}/bin:$PATH"
          echo "📦 Installing GLFW for arm64..."
          ${{ matrix.homebrew_prefix }}/bin/brew install glfw
          
        else
          # For x86_64 builds, use regular Homebrew (which should already be installed on runners)
          # But make sure it's in /usr/local
          if [ ! -d "/usr/local/bin" ] || [ ! -f "/usr/local/bin/brew" ]; then
            echo "📦 Installing/updating Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          fi
          
          export PATH="/usr/local/bin:$PATH"
          echo "📦 Installing GLFW for x86_64..."
          /usr/local/bin/brew install glfw || brew install glfw
        fi
        
        # Verify installation
        echo "🔍 Verifying GLFW installation:"
        ls -la ${{ matrix.homebrew_prefix }}/include/ | grep GLFW || echo "❌ GLFW headers not found"
        ls -la ${{ matrix.homebrew_prefix }}/lib/ | grep glfw || echo "❌ GLFW library not found"
        
        # Test compilation with a simple program
        echo "🧪 Testing compilation..."
        cat > test_glfw.cpp << 'EOF'
        #include <GLFW/glfw3.h>
        int main() { return 0; }
        EOF
        
        clang++ -arch ${{ matrix.cc_arch }} -I${{ matrix.homebrew_prefix }}/include test_glfw.cpp -c -o test_glfw.o || {
          echo "❌ Failed to compile test program"
          echo "Trying with different flags..."
          clang++ -arch ${{ matrix.cc_arch }} -I${{ matrix.homebrew_prefix }}/include -I${{ matrix.homebrew_prefix }}/include/GLFW test_glfw.cpp -c -o test_glfw.o || exit 1
        }
        echo "✅ Test compilation successful"
        rm -f test_glfw.cpp test_glfw.o
    
    - name: Build for ${{ matrix.arch }}
      run: |
        echo "🔨 Building for ${{ matrix.arch }}..."
        
        # Set environment variables for the build
        export HOMEBREW_PREFIX="${{ matrix.homebrew_prefix }}"
        export PATH="${{ matrix.homebrew_prefix }}/bin:$PATH"
        
        # Build using Makefile
        make clean
        make ARCH=${{ matrix.arch }}
        
        # Verify the build
        echo "🔍 Verifying build:"
        file Grav.app/Contents/MacOS/grav
        
        # Create distribution package
        make package ARCH=${{ matrix.arch }}
        
        # Also create a standalone binary package
        mkdir -p dist
        zip -j dist/grav-${{ matrix.arch }}-binary.zip Grav.app/Contents/MacOS/grav
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: grav-${{ matrix.arch }}
        path: |
          dist/grav-${{ matrix.arch }}.zip
          dist/grav-${{ matrix.arch }}-binary.zip

  build-universal:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Both Homebrews
      run: |
        echo "🌍 Setting up dependencies for universal build..."
        
        # Install Apple Silicon Homebrew
        if [ ! -d "/opt/homebrew" ]; then
          echo "📦 Installing Apple Silicon Homebrew..."
          sudo mkdir -p /opt/homebrew
          sudo chown -R $(whoami) /opt/homebrew
          curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C /opt/homebrew
        fi
        
        # Install Intel Homebrew (usually already there on runners)
        if [ ! -f "/usr/local/bin/brew" ]; then
          echo "📦 Installing Intel Homebrew..."
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        
        # Install GLFW for both architectures
        /opt/homebrew/bin/brew install glfw || echo "arm64 GLFW may already be installed"
        /usr/local/bin/brew install glfw || echo "x86_64 GLFW may already be installed"
        
        # Verify both installations
        echo "🔍 Verifying installations:"
        echo "arm64 GLFW: $(ls -la /opt/homebrew/include/ | grep GLFW || echo 'Not found')"
        echo "x86_64 GLFW: $(ls -la /usr/local/include/ | grep GLFW || echo 'Not found')"
    
    - name: Build Universal Binary
      run: |
        echo "🌍 Building universal binary..."
        
        # Build universal using Makefile
        make universal
        
        # Verify it's actually universal
        echo "🔍 Verifying universal build:"
        lipo -info Grav.app/Contents/MacOS/grav
        
        # Package universal build
        make package-universal
        
        # Create standalone universal binary
        mkdir -p dist
        zip -j dist/grav-universal-binary.zip Grav.app/Contents/MacOS/grav
    
    - name: Upload universal artifacts
      uses: actions/upload-artifact@v4
      with:
        name: grav-universal
        path: |
          dist/grav-universal.zip
          dist/grav-universal-binary.zip

  create-release:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    needs: [build-and-release, build-universal]
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}-${{ github.sha }}
        name: "Grav Build ${{ github.run_number }}"
        body: |
          🚀 Automated build from commit [`${{ github.sha }}`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
          
          ## 📦 Downloads
          
          ### 🌍 Universal Binaries (Recommended - Works on All Macs)
          - **Universal App Bundle**: `grav-universal.zip` 
          - **Universal Binary**: `grav-universal-binary.zip`
          
          ### Architecture-Specific Builds
          
          #### App Bundles (.app)
          - **🍎 Apple Silicon (M1/M2/M3/M4 Macs)**: `grav-arm64.zip`
          - **💻 Intel Macs**: `grav-x86_64.zip`
          
          #### Standalone Binaries
          - **🍎 Apple Silicon**: `grav-arm64-binary.zip`
          - **💻 Intel**: `grav-x86_64-binary.zip`
          
          ## 🛠️ Installation
          
          ### Universal App (Easiest):
          1. Download `grav-universal.zip`
          2. Extract and drag `Grav.app` to Applications
          3. Works on any Mac (Apple Silicon or Intel)
          
          ## 🔍 Architecture Detection
          ```bash
          uname -m  # Returns: arm64 (Apple Silicon) or x86_64 (Intel)
          ```
        files: |
          grav-arm64/*.zip
          grav-x86_64/*.zip
          grav-universal/*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Build and Release (Alternative)\n\non:\n  push:\n    branches: [ main, master ]\n  pull_request:\n    branches: [ main, master ]\n\njobs:\n  build-and-release:\n    runs-on: macos-latest\n    strategy:\n      matrix:\n        arch: [x86_64, arm64]\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      \n    - name: Setup Dependencies\n      run: |\n        echo \"üöÄ Setting up dependencies for ${{ matrix.arch }} build...\"\n        echo \"Runner architecture: $(uname -m)\"\n        echo \"Target architecture: ${{ matrix.arch }}\"\n        \n        if [ \"${{ matrix.arch }}\" = \"x86_64\" ] && [ \"$(uname -m)\" = \"arm64\" ]; then\n          echo \"üì¶ Setting up x86_64 GLFW on Apple Silicon runner...\"\n          \n          # Install Rosetta 2\n          sudo softwareupdate --install-rosetta --agree-to-license || echo \"Rosetta already installed\"\n          \n          # Create directories\n          sudo mkdir -p /usr/local/{include,lib}\n          sudo chown -R $(whoami) /usr/local\n          \n          # Download precompiled GLFW binaries for x86_64\n          echo \"Downloading precompiled GLFW binaries...\"\n          curl -L https://github.com/glfw/glfw/releases/download/3.4/glfw-3.4.bin.MACOS.zip -o glfw-macos.zip\n          unzip glfw-macos.zip\n          \n          # Extract x86_64 libraries (Intel Mac binaries)\n          # GLFW precompiled binaries include universal binaries, extract x86_64 part\n          cp -r glfw-3.4.bin.MACOS/include/* /usr/local/include/\n          \n          # Check if the library is universal and extract x86_64\n          if lipo -info glfw-3.4.bin.MACOS/lib-x86_64/libglfw.3.dylib > /dev/null 2>&1; then\n            # Use the x86_64 specific library if available\n            cp glfw-3.4.bin.MACOS/lib-x86_64/*.dylib /usr/local/lib/\n            cp glfw-3.4.bin.MACOS/lib-x86_64/*.a /usr/local/lib/\n          else\n            # Extract x86_64 from universal binary\n            lipo -thin x86_64 glfw-3.4.bin.MACOS/lib-universal/libglfw.3.dylib -output /usr/local/lib/libglfw.3.dylib\n            lipo -thin x86_64 glfw-3.4.bin.MACOS/lib-universal/libglfw.dylib -output /usr/local/lib/libglfw.dylib\n            cp glfw-3.4.bin.MACOS/lib-universal/libglfw3.a /usr/local/lib/\n          fi\n          \n          rm -rf glfw-3.4.bin.MACOS glfw-macos.zip\n          \n          # Verify installation\n          echo \"üîç Verifying x86_64 GLFW:\"\n          if [ -f \"/usr/local/lib/libglfw.dylib\" ]; then\n            echo \"x86_64 GLFW architecture: $(lipo -info /usr/local/lib/libglfw.dylib)\"\n            ls -la /usr/local/lib/ | grep glfw\n          else\n            echo \"‚ùå x86_64 GLFW not found\"\n            exit 1\n          fi\n          \n        else\n          echo \"üì¶ Installing native GLFW...\"\n          brew install glfw\n          \n          # Verify installation \n          echo \"üîç Verifying GLFW installation:\"\n          ls -la /opt/homebrew/lib/ | grep glfw || echo \"GLFW library not found\"\n          \n          if [ -f \"/opt/homebrew/lib/libglfw.dylib\" ]; then\n            echo \"GLFW architecture: $(lipo -info /opt/homebrew/lib/libglfw.dylib)\"\n          fi\n        fi\n    \n    - name: Build for ${{ matrix.arch }}\n      run: |\n        echo \"üî® Building for ${{ matrix.arch }}...\"\n        \n        if [ \"${{ matrix.arch }}\" = \"x86_64\" ] && [ \"$(uname -m)\" = \"arm64\" ]; then\n          echo \"üíª Building x86_64 on Apple Silicon runner...\"\n          \n          mkdir -p Grav.app/Contents/MacOS\n          mkdir -p Grav.app/Contents/Resources\n          \n          # Try dynamic linking first\n          clang++ main.cpp \\\n            -std=c++11 \\\n            -arch x86_64 \\\n            -I/usr/local/include \\\n            -L/usr/local/lib \\\n            -lglfw \\\n            -framework Cocoa \\\n            -framework OpenGL \\\n            -framework IOKit \\\n            -o Grav.app/Contents/MacOS/grav || {\n            \n            echo \"‚ùå Dynamic linking failed, trying static...\"\n            clang++ main.cpp \\\n              -std=c++11 \\\n              -arch x86_64 \\\n              -I/usr/local/include \\\n              /usr/local/lib/libglfw3.a \\\n              -framework Cocoa \\\n              -framework OpenGL \\\n              -framework IOKit \\\n              -o Grav.app/Contents/MacOS/grav || {\n              echo \"‚ùå Both linking methods failed\"\n              exit 1\n            }\n          }\n          \n          # Copy resources\n          cp -r Resources/* Grav.app/Contents/Resources/ 2>/dev/null || echo \"No resources to copy\"\n          cp Info.plist Grav.app/Contents/ 2>/dev/null || echo \"No Info.plist to copy\"\n          \n        else\n          # Use Makefile for native builds\n          make clean\n          make ARCH=${{ matrix.arch }}\n        fi\n        \n        # Verify build\n        echo \"üîç Verifying build:\"\n        file Grav.app/Contents/MacOS/grav\n        \n        # Create packages\n        mkdir -p dist\n        zip -r dist/grav-${{ matrix.arch }}.zip Grav.app\n        zip -j dist/grav-${{ matrix.arch }}-binary.zip Grav.app/Contents/MacOS/grav\n    \n    - name: Upload build artifacts\n      uses: actions/upload-artifact@v4\n      with:\n        name: grav-${{ matrix.arch }}\n        path: |\n          dist/grav-${{ matrix.arch }}.zip\n          dist/grav-${{ matrix.arch }}-binary.zip\n
